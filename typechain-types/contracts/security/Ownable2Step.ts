/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface Ownable2StepInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EMERGENCY_COOLDOWN"
      | "MAX_DAILY_EMERGENCY_WITHDRAWAL"
      | "OWNERSHIP_TRANSFER_TIMEOUT"
      | "acceptOwnership"
      | "cancelOwnershipTransfer"
      | "emergencyAdmin"
      | "emergencyWithdraw"
      | "owner"
      | "ownershipTransferInitiatedAt"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "renounceOwnership"
      | "setEmergencyAdmin"
      | "todayEmergencyWithdrawals"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EmergencyActionExecuted"
      | "EmergencyAdminUpdated"
      | "OwnershipTransferCancelled"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "PausedStateChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EMERGENCY_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_DAILY_EMERGENCY_WITHDRAWAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OWNERSHIP_TRANSFER_TIMEOUT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOwnershipTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownershipTransferInitiatedAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "todayEmergencyWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "EMERGENCY_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_DAILY_EMERGENCY_WITHDRAWAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OWNERSHIP_TRANSFER_TIMEOUT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownershipTransferInitiatedAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "todayEmergencyWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace EmergencyActionExecutedEvent {
  export type InputTuple = [
    action: string,
    executor: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    action: string,
    executor: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    action: string;
    executor: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyAdminUpdatedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferCancelledEvent {
  export type InputTuple = [pendingOwner: AddressLike];
  export type OutputTuple = [pendingOwner: string];
  export interface OutputObject {
    pendingOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [
    previousOwner: AddressLike,
    newOwner: AddressLike,
    initiatedAt: BigNumberish
  ];
  export type OutputTuple = [
    previousOwner: string,
    newOwner: string,
    initiatedAt: bigint
  ];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
    initiatedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedStateChangedEvent {
  export type InputTuple = [isPaused: boolean];
  export type OutputTuple = [isPaused: boolean];
  export interface OutputObject {
    isPaused: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Ownable2Step extends BaseContract {
  connect(runner?: ContractRunner | null): Ownable2Step;
  waitForDeployment(): Promise<this>;

  interface: Ownable2StepInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EMERGENCY_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  MAX_DAILY_EMERGENCY_WITHDRAWAL: TypedContractMethod<[], [bigint], "view">;

  OWNERSHIP_TRANSFER_TIMEOUT: TypedContractMethod<[], [bigint], "view">;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  cancelOwnershipTransfer: TypedContractMethod<[], [void], "nonpayable">;

  emergencyAdmin: TypedContractMethod<[], [string], "view">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  ownershipTransferInitiatedAt: TypedContractMethod<[], [bigint], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setEmergencyAdmin: TypedContractMethod<
    [newEmergencyAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  todayEmergencyWithdrawals: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EMERGENCY_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_DAILY_EMERGENCY_WITHDRAWAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OWNERSHIP_TRANSFER_TIMEOUT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelOwnershipTransfer"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownershipTransferInitiatedAt"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmergencyAdmin"
  ): TypedContractMethod<
    [newEmergencyAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "todayEmergencyWithdrawals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "EmergencyActionExecuted"
  ): TypedContractEvent<
    EmergencyActionExecutedEvent.InputTuple,
    EmergencyActionExecutedEvent.OutputTuple,
    EmergencyActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyAdminUpdated"
  ): TypedContractEvent<
    EmergencyAdminUpdatedEvent.InputTuple,
    EmergencyAdminUpdatedEvent.OutputTuple,
    EmergencyAdminUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferCancelled"
  ): TypedContractEvent<
    OwnershipTransferCancelledEvent.InputTuple,
    OwnershipTransferCancelledEvent.OutputTuple,
    OwnershipTransferCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PausedStateChanged"
  ): TypedContractEvent<
    PausedStateChangedEvent.InputTuple,
    PausedStateChangedEvent.OutputTuple,
    PausedStateChangedEvent.OutputObject
  >;

  filters: {
    "EmergencyActionExecuted(string,address,uint256)": TypedContractEvent<
      EmergencyActionExecutedEvent.InputTuple,
      EmergencyActionExecutedEvent.OutputTuple,
      EmergencyActionExecutedEvent.OutputObject
    >;
    EmergencyActionExecuted: TypedContractEvent<
      EmergencyActionExecutedEvent.InputTuple,
      EmergencyActionExecutedEvent.OutputTuple,
      EmergencyActionExecutedEvent.OutputObject
    >;

    "EmergencyAdminUpdated(address,address)": TypedContractEvent<
      EmergencyAdminUpdatedEvent.InputTuple,
      EmergencyAdminUpdatedEvent.OutputTuple,
      EmergencyAdminUpdatedEvent.OutputObject
    >;
    EmergencyAdminUpdated: TypedContractEvent<
      EmergencyAdminUpdatedEvent.InputTuple,
      EmergencyAdminUpdatedEvent.OutputTuple,
      EmergencyAdminUpdatedEvent.OutputObject
    >;

    "OwnershipTransferCancelled(address)": TypedContractEvent<
      OwnershipTransferCancelledEvent.InputTuple,
      OwnershipTransferCancelledEvent.OutputTuple,
      OwnershipTransferCancelledEvent.OutputObject
    >;
    OwnershipTransferCancelled: TypedContractEvent<
      OwnershipTransferCancelledEvent.InputTuple,
      OwnershipTransferCancelledEvent.OutputTuple,
      OwnershipTransferCancelledEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address,uint256)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PausedStateChanged(bool)": TypedContractEvent<
      PausedStateChangedEvent.InputTuple,
      PausedStateChangedEvent.OutputTuple,
      PausedStateChangedEvent.OutputObject
    >;
    PausedStateChanged: TypedContractEvent<
      PausedStateChangedEvent.InputTuple,
      PausedStateChangedEvent.OutputTuple,
      PausedStateChangedEvent.OutputObject
    >;
  };
}
