/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IOneInchRouter {
  export type SwapDescriptionStruct = {
    srcToken: AddressLike;
    dstToken: AddressLike;
    srcReceiver: AddressLike;
    dstReceiver: AddressLike;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
  };

  export type SwapDescriptionStructOutput = [
    srcToken: string,
    dstToken: string,
    srcReceiver: string,
    dstReceiver: string,
    amount: bigint,
    minReturnAmount: bigint,
    flags: bigint
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: bigint;
    minReturnAmount: bigint;
    flags: bigint;
  };
}

export interface IOneInchRouterInterface extends Interface {
  getFunction(nameOrSignature: "swap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [
      AddressLike,
      IOneInchRouter.SwapDescriptionStruct,
      BytesLike,
      BytesLike
    ]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
}

export interface IOneInchRouter extends BaseContract {
  connect(runner?: ContractRunner | null): IOneInchRouter;
  waitForDeployment(): Promise<this>;

  interface: IOneInchRouterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  swap: TypedContractMethod<
    [
      executor: AddressLike,
      desc: IOneInchRouter.SwapDescriptionStruct,
      permit: BytesLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; spentAmount: bigint }],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      executor: AddressLike,
      desc: IOneInchRouter.SwapDescriptionStruct,
      permit: BytesLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; spentAmount: bigint }],
    "payable"
  >;

  filters: {};
}
