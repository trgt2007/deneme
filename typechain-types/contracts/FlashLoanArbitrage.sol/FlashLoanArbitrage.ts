/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface FlashLoanArbitrageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADDRESSES_PROVIDER"
      | "POOL"
      | "_executeArbitrageInternal"
      | "acceptOwnership"
      | "authorizedCallers"
      | "balancerVault"
      | "currentDayLoss"
      | "curvePools"
      | "emergencyWithdraw"
      | "executeArbitrage"
      | "executeOperation"
      | "getStatistics"
      | "isAuthorized"
      | "lastResetTimestamp"
      | "maxDailyLoss"
      | "maxFlashLoanAmount"
      | "maxGasPrice"
      | "oneInchRouter"
      | "owner"
      | "pause"
      | "paused"
      | "pendingOwner"
      | "renounceOwnership"
      | "setAuthorizedCaller"
      | "setCurvePool"
      | "setMaxDailyLoss"
      | "setMaxFlashLoanAmount"
      | "setMaxGasPrice"
      | "successfulArbitrageCount"
      | "sushiSwapRouter"
      | "totalArbitrageCount"
      | "totalProfitByToken"
      | "transferOwnership"
      | "uniswapV3Router"
      | "unpause"
      | "withdrawProfits"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ArbitrageExecuted"
      | "ArbitrageFailed"
      | "AuthorizedCallerUpdated"
      | "CircuitBreakerTriggered"
      | "CurvePoolUpdated"
      | "MaxFlashLoanAmountUpdated"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADDRESSES_PROVIDER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "POOL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_executeArbitrageInternal",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedCallers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balancerVault",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentDayLoss",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curvePools",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeArbitrage",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperation",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStatistics",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isAuthorized",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastResetTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDailyLoss",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoanAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxGasPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorizedCaller",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurvePool",
    values: [AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDailyLoss",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxFlashLoanAmount",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxGasPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "successfulArbitrageCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sushiSwapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalArbitrageCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalProfitByToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Router",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawProfits",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "ADDRESSES_PROVIDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "POOL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_executeArbitrageInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedCallers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "balancerVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentDayLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "curvePools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeArbitrage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOperation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStatistics",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAuthorized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastResetTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDailyLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoanAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneInchRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorizedCaller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCurvePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDailyLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxFlashLoanAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxGasPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successfulArbitrageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalArbitrageCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalProfitByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Router",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProfits",
    data: BytesLike
  ): Result;
}

export namespace ArbitrageExecutedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    profit: BigNumberish,
    dexPath: string[],
    gasUsed: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    amount: bigint,
    profit: bigint,
    dexPath: string[],
    gasUsed: bigint
  ];
  export interface OutputObject {
    token: string;
    amount: bigint;
    profit: bigint;
    dexPath: string[];
    gasUsed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ArbitrageFailedEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [token: string, amount: bigint, reason: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorizedCallerUpdatedEvent {
  export type InputTuple = [caller: AddressLike, authorized: boolean];
  export type OutputTuple = [caller: string, authorized: boolean];
  export interface OutputObject {
    caller: string;
    authorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CircuitBreakerTriggeredEvent {
  export type InputTuple = [totalLoss: BigNumberish];
  export type OutputTuple = [totalLoss: bigint];
  export interface OutputObject {
    totalLoss: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CurvePoolUpdatedEvent {
  export type InputTuple = [
    token0: AddressLike,
    token1: AddressLike,
    pool: AddressLike
  ];
  export type OutputTuple = [token0: string, token1: string, pool: string];
  export interface OutputObject {
    token0: string;
    token1: string;
    pool: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxFlashLoanAmountUpdatedEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlashLoanArbitrage extends BaseContract {
  connect(runner?: ContractRunner | null): FlashLoanArbitrage;
  waitForDeployment(): Promise<this>;

  interface: FlashLoanArbitrageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADDRESSES_PROVIDER: TypedContractMethod<[], [string], "view">;

  POOL: TypedContractMethod<[], [string], "view">;

  _executeArbitrageInternal: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, params: BytesLike],
    [bigint],
    "nonpayable"
  >;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  authorizedCallers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  balancerVault: TypedContractMethod<[], [string], "view">;

  currentDayLoss: TypedContractMethod<[], [bigint], "view">;

  curvePools: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [string],
    "view"
  >;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  executeArbitrage: TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, params: BytesLike],
    [void],
    "nonpayable"
  >;

  executeOperation: TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      premium: BigNumberish,
      initiator: AddressLike,
      params: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  getStatistics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        totalCount: bigint;
        successCount: bigint;
        dailyLoss: bigint;
        isPaused: boolean;
      }
    ],
    "view"
  >;

  isAuthorized: TypedContractMethod<[caller: AddressLike], [boolean], "view">;

  lastResetTimestamp: TypedContractMethod<[], [bigint], "view">;

  maxDailyLoss: TypedContractMethod<[], [bigint], "view">;

  maxFlashLoanAmount: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  maxGasPrice: TypedContractMethod<[], [bigint], "view">;

  oneInchRouter: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setAuthorizedCaller: TypedContractMethod<
    [caller: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;

  setCurvePool: TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, pool: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxDailyLoss: TypedContractMethod<
    [_maxDailyLoss: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxFlashLoanAmount: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxGasPrice: TypedContractMethod<
    [_maxGasPrice: BigNumberish],
    [void],
    "nonpayable"
  >;

  successfulArbitrageCount: TypedContractMethod<[], [bigint], "view">;

  sushiSwapRouter: TypedContractMethod<[], [string], "view">;

  totalArbitrageCount: TypedContractMethod<[], [bigint], "view">;

  totalProfitByToken: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  uniswapV3Router: TypedContractMethod<[], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  withdrawProfits: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADDRESSES_PROVIDER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "_executeArbitrageInternal"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, params: BytesLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedCallers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "balancerVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "currentDayLoss"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "curvePools"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeArbitrage"
  ): TypedContractMethod<
    [asset: AddressLike, amount: BigNumberish, params: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeOperation"
  ): TypedContractMethod<
    [
      asset: AddressLike,
      amount: BigNumberish,
      premium: BigNumberish,
      initiator: AddressLike,
      params: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getStatistics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, boolean] & {
        totalCount: bigint;
        successCount: bigint;
        dailyLoss: bigint;
        isPaused: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAuthorized"
  ): TypedContractMethod<[caller: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastResetTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxDailyLoss"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxFlashLoanAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxGasPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "oneInchRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setAuthorizedCaller"
  ): TypedContractMethod<
    [caller: AddressLike, authorized: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCurvePool"
  ): TypedContractMethod<
    [token0: AddressLike, token1: AddressLike, pool: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxDailyLoss"
  ): TypedContractMethod<[_maxDailyLoss: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxFlashLoanAmount"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxGasPrice"
  ): TypedContractMethod<[_maxGasPrice: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "successfulArbitrageCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sushiSwapRouter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalArbitrageCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalProfitByToken"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "uniswapV3Router"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawProfits"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ArbitrageExecuted"
  ): TypedContractEvent<
    ArbitrageExecutedEvent.InputTuple,
    ArbitrageExecutedEvent.OutputTuple,
    ArbitrageExecutedEvent.OutputObject
  >;
  getEvent(
    key: "ArbitrageFailed"
  ): TypedContractEvent<
    ArbitrageFailedEvent.InputTuple,
    ArbitrageFailedEvent.OutputTuple,
    ArbitrageFailedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorizedCallerUpdated"
  ): TypedContractEvent<
    AuthorizedCallerUpdatedEvent.InputTuple,
    AuthorizedCallerUpdatedEvent.OutputTuple,
    AuthorizedCallerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CircuitBreakerTriggered"
  ): TypedContractEvent<
    CircuitBreakerTriggeredEvent.InputTuple,
    CircuitBreakerTriggeredEvent.OutputTuple,
    CircuitBreakerTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "CurvePoolUpdated"
  ): TypedContractEvent<
    CurvePoolUpdatedEvent.InputTuple,
    CurvePoolUpdatedEvent.OutputTuple,
    CurvePoolUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MaxFlashLoanAmountUpdated"
  ): TypedContractEvent<
    MaxFlashLoanAmountUpdatedEvent.InputTuple,
    MaxFlashLoanAmountUpdatedEvent.OutputTuple,
    MaxFlashLoanAmountUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ArbitrageExecuted(address,uint256,uint256,string[],uint256)": TypedContractEvent<
      ArbitrageExecutedEvent.InputTuple,
      ArbitrageExecutedEvent.OutputTuple,
      ArbitrageExecutedEvent.OutputObject
    >;
    ArbitrageExecuted: TypedContractEvent<
      ArbitrageExecutedEvent.InputTuple,
      ArbitrageExecutedEvent.OutputTuple,
      ArbitrageExecutedEvent.OutputObject
    >;

    "ArbitrageFailed(address,uint256,string)": TypedContractEvent<
      ArbitrageFailedEvent.InputTuple,
      ArbitrageFailedEvent.OutputTuple,
      ArbitrageFailedEvent.OutputObject
    >;
    ArbitrageFailed: TypedContractEvent<
      ArbitrageFailedEvent.InputTuple,
      ArbitrageFailedEvent.OutputTuple,
      ArbitrageFailedEvent.OutputObject
    >;

    "AuthorizedCallerUpdated(address,bool)": TypedContractEvent<
      AuthorizedCallerUpdatedEvent.InputTuple,
      AuthorizedCallerUpdatedEvent.OutputTuple,
      AuthorizedCallerUpdatedEvent.OutputObject
    >;
    AuthorizedCallerUpdated: TypedContractEvent<
      AuthorizedCallerUpdatedEvent.InputTuple,
      AuthorizedCallerUpdatedEvent.OutputTuple,
      AuthorizedCallerUpdatedEvent.OutputObject
    >;

    "CircuitBreakerTriggered(uint256)": TypedContractEvent<
      CircuitBreakerTriggeredEvent.InputTuple,
      CircuitBreakerTriggeredEvent.OutputTuple,
      CircuitBreakerTriggeredEvent.OutputObject
    >;
    CircuitBreakerTriggered: TypedContractEvent<
      CircuitBreakerTriggeredEvent.InputTuple,
      CircuitBreakerTriggeredEvent.OutputTuple,
      CircuitBreakerTriggeredEvent.OutputObject
    >;

    "CurvePoolUpdated(address,address,address)": TypedContractEvent<
      CurvePoolUpdatedEvent.InputTuple,
      CurvePoolUpdatedEvent.OutputTuple,
      CurvePoolUpdatedEvent.OutputObject
    >;
    CurvePoolUpdated: TypedContractEvent<
      CurvePoolUpdatedEvent.InputTuple,
      CurvePoolUpdatedEvent.OutputTuple,
      CurvePoolUpdatedEvent.OutputObject
    >;

    "MaxFlashLoanAmountUpdated(address,uint256)": TypedContractEvent<
      MaxFlashLoanAmountUpdatedEvent.InputTuple,
      MaxFlashLoanAmountUpdatedEvent.OutputTuple,
      MaxFlashLoanAmountUpdatedEvent.OutputObject
    >;
    MaxFlashLoanAmountUpdated: TypedContractEvent<
      MaxFlashLoanAmountUpdatedEvent.InputTuple,
      MaxFlashLoanAmountUpdatedEvent.OutputTuple,
      MaxFlashLoanAmountUpdatedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
