/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IAggregationRouterV5 {
  export type SwapDescriptionStruct = {
    srcToken: AddressLike;
    dstToken: AddressLike;
    srcReceiver: AddressLike;
    dstReceiver: AddressLike;
    amount: BigNumberish;
    minReturnAmount: BigNumberish;
    flags: BigNumberish;
  };

  export type SwapDescriptionStructOutput = [
    srcToken: string,
    dstToken: string,
    srcReceiver: string,
    dstReceiver: string,
    amount: bigint,
    minReturnAmount: bigint,
    flags: bigint
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: bigint;
    minReturnAmount: bigint;
    flags: bigint;
  };
}

export interface IAggregationRouterV5Interface extends Interface {
  getFunction(
    nameOrSignature:
      | "clipperSwap"
      | "fillOrderRFQ"
      | "swap"
      | "unoswap"
      | "unoswapMulti"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "clipperSwap",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillOrderRFQ",
    values: [
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      AddressLike,
      IAggregationRouterV5.SwapDescriptionStruct,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswap",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unoswapMulti",
    values: [AddressLike, BigNumberish[], BigNumberish, BigNumberish[][]]
  ): string;

  decodeFunctionResult(
    functionFragment: "clipperSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillOrderRFQ",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unoswap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unoswapMulti",
    data: BytesLike
  ): Result;
}

export interface IAggregationRouterV5 extends BaseContract {
  connect(runner?: ContractRunner | null): IAggregationRouterV5;
  waitForDeployment(): Promise<this>;

  interface: IAggregationRouterV5Interface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  clipperSwap: TypedContractMethod<
    [
      clipperExchange: AddressLike,
      srcToken: AddressLike,
      dstToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      goodUntil: BigNumberish,
      r: BytesLike,
      vs: BytesLike
    ],
    [bigint],
    "payable"
  >;

  fillOrderRFQ: TypedContractMethod<
    [
      info: BigNumberish,
      makerAsset: AddressLike,
      takerAsset: AddressLike,
      maker: AddressLike,
      allowedSender: AddressLike,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish
    ],
    [[bigint, bigint]],
    "payable"
  >;

  swap: TypedContractMethod<
    [
      executor: AddressLike,
      desc: IAggregationRouterV5.SwapDescriptionStruct,
      permit: BytesLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; spentAmount: bigint }],
    "payable"
  >;

  unoswap: TypedContractMethod<
    [
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;

  unoswapMulti: TypedContractMethod<
    [
      srcToken: AddressLike,
      amounts: BigNumberish[],
      minReturn: BigNumberish,
      pools: BigNumberish[][]
    ],
    [bigint],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "clipperSwap"
  ): TypedContractMethod<
    [
      clipperExchange: AddressLike,
      srcToken: AddressLike,
      dstToken: AddressLike,
      inputAmount: BigNumberish,
      outputAmount: BigNumberish,
      goodUntil: BigNumberish,
      r: BytesLike,
      vs: BytesLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "fillOrderRFQ"
  ): TypedContractMethod<
    [
      info: BigNumberish,
      makerAsset: AddressLike,
      takerAsset: AddressLike,
      maker: AddressLike,
      allowedSender: AddressLike,
      makingAmount: BigNumberish,
      takingAmount: BigNumberish
    ],
    [[bigint, bigint]],
    "payable"
  >;
  getFunction(
    nameOrSignature: "swap"
  ): TypedContractMethod<
    [
      executor: AddressLike,
      desc: IAggregationRouterV5.SwapDescriptionStruct,
      permit: BytesLike,
      data: BytesLike
    ],
    [[bigint, bigint] & { returnAmount: bigint; spentAmount: bigint }],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unoswap"
  ): TypedContractMethod<
    [
      srcToken: AddressLike,
      amount: BigNumberish,
      minReturn: BigNumberish,
      pools: BigNumberish[]
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "unoswapMulti"
  ): TypedContractMethod<
    [
      srcToken: AddressLike,
      amounts: BigNumberish[],
      minReturn: BigNumberish,
      pools: BigNumberish[][]
    ],
    [bigint],
    "payable"
  >;

  filters: {};
}
