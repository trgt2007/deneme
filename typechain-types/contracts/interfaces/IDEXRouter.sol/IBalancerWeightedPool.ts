/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IBalancerWeightedPoolInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "balanceOf"
      | "calcBptOutGivenExactTokensIn"
      | "calcTokensOutGivenExactBptIn"
      | "getGradualWeightUpdateParams"
      | "getInvariant"
      | "getLastInvariant"
      | "getNormalizedWeights"
      | "getPoolId"
      | "getScalingFactors"
      | "getSwapFeePercentage"
      | "getVault"
      | "totalSupply"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calcBptOutGivenExactTokensIn",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calcTokensOutGivenExactBptIn",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGradualWeightUpdateParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInvariant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastInvariant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedWeights",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPoolId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getScalingFactors",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calcBptOutGivenExactTokensIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcTokensOutGivenExactBptIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGradualWeightUpdateParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInvariant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastInvariant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPoolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getScalingFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSwapFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
}

export interface IBalancerWeightedPool extends BaseContract {
  connect(runner?: ContractRunner | null): IBalancerWeightedPool;
  waitForDeployment(): Promise<this>;

  interface: IBalancerWeightedPoolInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  calcBptOutGivenExactTokensIn: TypedContractMethod<
    [amountsIn: BigNumberish[]],
    [bigint],
    "view"
  >;

  calcTokensOutGivenExactBptIn: TypedContractMethod<
    [bptAmountIn: BigNumberish],
    [bigint[]],
    "view"
  >;

  getGradualWeightUpdateParams: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint[], bigint[]] & {
        startTime: bigint;
        endTime: bigint;
        startWeights: bigint[];
        endWeights: bigint[];
      }
    ],
    "view"
  >;

  getInvariant: TypedContractMethod<[], [bigint], "view">;

  getLastInvariant: TypedContractMethod<[], [bigint], "view">;

  getNormalizedWeights: TypedContractMethod<[], [bigint[]], "view">;

  getPoolId: TypedContractMethod<[], [string], "view">;

  getScalingFactors: TypedContractMethod<[], [bigint[]], "view">;

  getSwapFeePercentage: TypedContractMethod<[], [bigint], "view">;

  getVault: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calcBptOutGivenExactTokensIn"
  ): TypedContractMethod<[amountsIn: BigNumberish[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "calcTokensOutGivenExactBptIn"
  ): TypedContractMethod<[bptAmountIn: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getGradualWeightUpdateParams"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint[], bigint[]] & {
        startTime: bigint;
        endTime: bigint;
        startWeights: bigint[];
        endWeights: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getInvariant"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastInvariant"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNormalizedWeights"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getPoolId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getScalingFactors"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getSwapFeePercentage"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVault"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
