# 🚀 Advanced Docker Compose Configuration for Flashloan Arbitrage Bot
# ⚡ Production-Grade Multi-Container Orchestration
# 🎯 Microservices Architecture with Service Discovery
# 🛡️ Security Hardening & Performance Optimization

version: '3.8'

# 🌐 Network Configuration for Service Mesh
networks:
  arbitrage-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.driver.mtu: "1500"
  
  monitoring-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16
          gateway: 172.21.0.1
  
  database-network:
    driver: bridge
    internal: true
    ipam:
      driver: default
      config:
        - subnet: 172.22.0.0/16
          gateway: 172.22.0.1

# 💾 Volume Configuration for Persistent Storage
volumes:
  # Application data volumes
  arbitrage-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/logs
  
  arbitrage-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/app
  
  arbitrage-cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/cache
  
  # Database volumes
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  postgres-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  # Monitoring volumes
  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  
  alertmanager-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/alertmanager

# 🎯 Service Definitions
services:
  # 🚀 Main Arbitrage Bot Application
  arbitrage-bot:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: runtime
      args:
        NODE_VERSION: "18.17.1"
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-1.0.0}
    image: arbitrage-bot:${VERSION:-latest}
    container_name: arbitrage-bot-main
    hostname: arbitrage-bot
    restart: unless-stopped
    
    # 🌐 Network Configuration
    networks:
      arbitrage-network:
        ipv4_address: 172.20.0.10
      monitoring-network:
        ipv4_address: 172.21.0.10
    
    # 📊 Port Mapping
    ports:
      - "3000:3000"    # Main application
      - "3001:3001"    # Health check
      - "3002:3002"    # Metrics
    
    # 🌐 Environment Variables
    environment:
      - NODE_ENV=production
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://arbitrage:${POSTGRES_PASSWORD}@postgres:5432/arbitrage
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - GRAFANA_ENDPOINT=http://grafana:3000
      - ENABLE_MONITORING=true
      - ENABLE_HEALTH_CHECKS=true
      - MAX_MEMORY_USAGE=2048
      - GC_AGGRESSIVE=true
      - ETHEREUM_RPC_URL=${ETHEREUM_RPC_URL}
      - POLYGON_RPC_URL=${POLYGON_RPC_URL}
      - ARBITRUM_RPC_URL=${ARBITRUM_RPC_URL}
      - PRIVATE_KEY=${PRIVATE_KEY}
      - FLASHLOAN_PROVIDER=aave_v3
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    
    # 💾 Volume Mounts
    volumes:
      - arbitrage-logs:/app/logs
      - arbitrage-data:/app/data
      - arbitrage-cache:/app/cache
      - ./config:/app/config:ro
      - ./contracts:/app/contracts:ro
    
    # 🔧 Resource Limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # 🛡️ Security Configuration
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    # 🔗 Service Dependencies
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      prometheus:
        condition: service_started
    
    # 💉 Health Check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # 📈 Price Monitor Service
  price-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: runtime
    image: arbitrage-bot:${VERSION:-latest}
    container_name: arbitrage-price-monitor
    hostname: price-monitor
    restart: unless-stopped
    command: ["node", "dist/src/services/price-monitor.js"]
    
    networks:
      arbitrage-network:
        ipv4_address: 172.20.0.11
      monitoring-network:
        ipv4_address: 172.21.0.11
    
    ports:
      - "3010:3001"    # Price monitor port
    
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=price-monitor
      - REDIS_URL=redis://redis:6379
      - WEBSOCKET_ENDPOINTS=${WEBSOCKET_ENDPOINTS}
      - PRICE_UPDATE_INTERVAL=1000
      - MAX_PRICE_AGE=5000
    
    volumes:
      - arbitrage-logs:/app/logs
      - arbitrage-cache:/app/cache
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    depends_on:
      redis:
        condition: service_healthy

  # ⛽ Gas Monitor Service
  gas-monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: runtime
    image: arbitrage-bot:${VERSION:-latest}
    container_name: arbitrage-gas-monitor
    hostname: gas-monitor
    restart: unless-stopped
    command: ["node", "dist/src/services/gas-monitor.js"]
    
    networks:
      arbitrage-network:
        ipv4_address: 172.20.0.12
      monitoring-network:
        ipv4_address: 172.21.0.12
    
    ports:
      - "3011:3002"    # Gas monitor metrics
    
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=gas-monitor
      - REDIS_URL=redis://redis:6379
      - GAS_UPDATE_INTERVAL=3000
      - MAX_GAS_PRICE=200
    
    volumes:
      - arbitrage-logs:/app/logs
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    
    depends_on:
      redis:
        condition: service_healthy

  # 🛡️ Risk Manager Service
  risk-manager:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: runtime
    image: arbitrage-bot:${VERSION:-latest}
    container_name: arbitrage-risk-manager
    hostname: risk-manager
    restart: unless-stopped
    command: ["node", "dist/src/services/risk-manager.js"]
    
    networks:
      arbitrage-network:
        ipv4_address: 172.20.0.13
      monitoring-network:
        ipv4_address: 172.21.0.13
    
    ports:
      - "3030:3030"    # Risk manager port
    
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=risk-manager
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://arbitrage:${POSTGRES_PASSWORD}@postgres:5432/arbitrage
      - MAX_DRAWDOWN=15
      - MAX_DAILY_LOSS=10000
      - CIRCUIT_BREAKER_ENABLED=true
    
    volumes:
      - arbitrage-logs:/app/logs
      - arbitrage-data:/app/data
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
    
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  # 🗄️ Redis Cache Database
  redis:
    image: redis:7.2-alpine
    container_name: arbitrage-redis
    hostname: redis
    restart: unless-stopped
    
    networks:
      arbitrage-network:
        ipv4_address: 172.20.0.20
      database-network:
        ipv4_address: 172.22.0.20
    
    ports:
      - "6379:6379"
    
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
      --tcp-keepalive 300
      --timeout 0
    
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # 🐘 PostgreSQL Database
  postgres:
    image: postgres:15.4-alpine
    container_name: arbitrage-postgres
    hostname: postgres
    restart: unless-stopped
    
    networks:
      database-network:
        ipv4_address: 172.22.0.21
    
    ports:
      - "5432:5432"
    
    environment:
      - POSTGRES_DB=arbitrage
      - POSTGRES_USER=arbitrage
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U arbitrage -d arbitrage"]
      interval: 10s
      timeout: 5s
      retries: 5

  # 📊 Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: arbitrage-prometheus
    hostname: prometheus
    restart: unless-stopped
    
    networks:
      monitoring-network:
        ipv4_address: 172.21.0.30
    
    ports:
      - "9090:9090"
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--query.max-concurrency=50'
      - '--query.timeout=2m'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    depends_on:
      - arbitrage-bot
      - price-monitor
      - gas-monitor

  # 📈 Grafana Visualization
  grafana:
    image: grafana/grafana:10.1.0
    container_name: arbitrage-grafana
    hostname: grafana
    restart: unless-stopped
    
    networks:
      monitoring-network:
        ipv4_address: 172.21.0.31
    
    ports:
      - "3000:3000"
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_ALLOW_ORG_CREATE=false
      - GF_USERS_AUTO_ASSIGN_ORG=true
      - GF_USERS_AUTO_ASSIGN_ORG_ID=1
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_SERVER_ROOT_URL=http://grafana:3000
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=grafana
      - GF_DATABASE_PASSWORD=${GRAFANA_DB_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    depends_on:
      - prometheus
      - postgres

  # 🚨 AlertManager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: arbitrage-alertmanager
    hostname: alertmanager
    restart: unless-stopped
    
    networks:
      monitoring-network:
        ipv4_address: 172.21.0.32
    
    ports:
      - "9093:9093"
    
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://alertmanager:9093'
      - '--cluster.listen-address=0.0.0.0:9094'
    
    volumes:
      - ./monitoring/alertmanager/config.yml:/etc/alertmanager/config.yml:ro
      - alertmanager-data:/alertmanager
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    
    depends_on:
      - prometheus

  # 📊 Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: arbitrage-node-exporter
    hostname: node-exporter
    restart: unless-stopped
    
    networks:
      monitoring-network:
        ipv4_address: 172.21.0.33
    
    ports:
      - "9100:9100"
    
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # 🐳 cAdvisor for Container Metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: arbitrage-cadvisor
    hostname: cadvisor
    restart: unless-stopped
    
    networks:
      monitoring-network:
        ipv4_address: 172.21.0.34
    
    ports:
      - "8080:8080"
    
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    
    privileged: true
    devices:
      - /dev/kmsg

  # 🔍 Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:v1.55.0
    container_name: arbitrage-redis-exporter
    hostname: redis-exporter
    restart: unless-stopped
    
    networks:
      monitoring-network:
        ipv4_address: 172.21.0.35
      database-network:
        ipv4_address: 172.22.0.35
    
    ports:
      - "9121:9121"
    
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    
    depends_on:
      - redis

  # 🐘 PostgreSQL Exporter
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.13.2
    container_name: arbitrage-postgres-exporter
    hostname: postgres-exporter
    restart: unless-stopped
    
    networks:
      monitoring-network:
        ipv4_address: 172.21.0.36
      database-network:
        ipv4_address: 172.22.0.36
    
    ports:
      - "9187:9187"
    
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres_exporter:${POSTGRES_EXPORTER_PASSWORD}@postgres:5432/arbitrage?sslmode=disable
    
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
    
    depends_on:
      - postgres

  # 📱 Telegram Notification Bot
  telegram-bot:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: runtime
    image: arbitrage-bot:${VERSION:-latest}
    container_name: arbitrage-telegram-bot
    hostname: telegram-bot
    restart: unless-stopped
    command: ["node", "dist/src/services/telegram-bot.js"]
    
    networks:
      arbitrage-network:
        ipv4_address: 172.20.0.40
    
    environment:
      - NODE_ENV=production
      - SERVICE_NAME=telegram-bot
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - REDIS_URL=redis://redis:6379
    
    volumes:
      - arbitrage-logs:/app/logs
    
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M
    
    depends_on:
      - redis

  # 🌐 Nginx Load Balancer
  nginx:
    image: nginx:1.25.2-alpine
    container_name: arbitrage-nginx
    hostname: nginx
    restart: unless-stopped
    
    networks:
      arbitrage-network:
        ipv4_address: 172.20.0.50
      monitoring-network:
        ipv4_address: 172.21.0.50
    
    ports:
      - "80:80"
      - "443:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
    
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    
    depends_on:
      - arbitrage-bot
      - grafana
      - prometheus

# 🔧 Extension Fields for Reusability
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "5"

x-deploy: &default-deploy
  restart_policy:
    condition: unless-stopped
    delay: 5s
    max_attempts: 3
    window: 120s

# 🌐 Global Configuration
configs:
  prometheus_config:
    file: ./monitoring/prometheus.yml
  
  grafana_dashboards:
    file: ./monitoring/grafana-dashboards/arbitrage-dashboard.json
  
  nginx_config:
    file: ./nginx/nginx.conf

# 🔐 Secrets Management
secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  
  redis_password:
    file: ./secrets/redis_password.txt
  
  private_key:
    file: ./secrets/private_key.txt
  
  telegram_token:
    file: ./secrets/telegram_token.txt