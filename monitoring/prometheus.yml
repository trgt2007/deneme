# üìä Advanced Prometheus Configuration for Flashloan Arbitrage Bot
# ‚ö° Comprehensive Metrics Collection & Real-time Monitoring
# üéØ Multi-Target Scraping with Dynamic Service Discovery
# üõ°Ô∏è High-Availability Setup with Alerting Integration

global:
  # üîß Global Configuration
  scrape_interval: 5s                    # Scrape targets every 5 seconds
  evaluation_interval: 10s               # Evaluate alerting rules every 10 seconds
  scrape_timeout: 4s                     # Timeout for scrape requests
  external_labels:
    cluster: 'arbitrage-bot'
    environment: 'production'
    region: 'us-east-1'
    version: '1.0.0'

# üìã Rule Files for Alerting
rule_files:
  - "rules/arbitrage_alerts.yml"         # Arbitrage-specific alerts
  - "rules/system_alerts.yml"            # System health alerts
  - "rules/performance_alerts.yml"       # Performance monitoring alerts
  - "rules/risk_alerts.yml"              # Risk management alerts
  - "rules/dex_alerts.yml"               # DEX connectivity alerts

# üö® Alertmanager Configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093
      scheme: http
      timeout: 10s
      api_version: v2

# üéØ Scrape Configuration Jobs
scrape_configs:
  # üöÄ Main Arbitrage Bot Application
  - job_name: 'arbitrage-bot'
    static_configs:
      - targets: ['arbitrage-bot:3000']
    scrape_interval: 2s                  # High-frequency scraping for bot metrics
    scrape_timeout: 1s
    metrics_path: '/metrics'
    honor_labels: true
    params:
      format: ['prometheus']
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: 'arbitrage-bot:3000'
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(arbitrage_.*|flashloan_.*|dex_.*|price_.*|gas_.*)'
        action: keep

  # üìà Price Monitoring Service
  - job_name: 'price-monitor'
    static_configs:
      - targets: ['price-monitor:3001']
    scrape_interval: 1s                  # Ultra-high frequency for price data
    scrape_timeout: 500ms
    metrics_path: '/metrics'
    params:
      collect[]: 
        - 'price_data'
        - 'price_spreads'
        - 'liquidity_data'
    relabel_configs:
      - source_labels: [dex]
        target_label: dex_name
      - source_labels: [token_pair]
        target_label: trading_pair
    metric_relabel_configs:
      # Keep only price-related metrics
      - source_labels: [__name__]
        regex: '(price_.*|spread_.*|liquidity_.*|volume_.*)'
        action: keep
      # Add calculated spread percentage
      - source_labels: [spread_absolute]
        target_label: spread_percentage
        regex: '(.+)'
        replacement: '${1}'

  # ‚õΩ Gas Price Monitoring
  - job_name: 'gas-monitor'
    static_configs:
      - targets: ['gas-monitor:3002']
    scrape_interval: 3s                  # Frequent gas price updates
    metrics_path: '/metrics'
    params:
      network[]:
        - 'ethereum'
        - 'polygon'
        - 'arbitrum'
    relabel_configs:
      - source_labels: [network]
        target_label: blockchain_network
      - source_labels: [gas_type]
        target_label: transaction_type

  # üîó DEX Integration Services
  - job_name: 'dex-handlers'
    static_configs:
      - targets: 
          - 'uniswap-handler:3010'
          - 'sushiswap-handler:3011' 
          - 'curve-handler:3012'
          - 'balancer-handler:3013'
          - 'oneinch-handler:3014'
    scrape_interval: 5s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^:]+)-handler:(\d+)'
        target_label: dex_protocol
        replacement: '${1}'
      - source_labels: [__address__]
        regex: '([^:]+)-handler:(\d+)'
        target_label: handler_port
        replacement: '${2}'
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(dex_.*|swap_.*|pool_.*|liquidity_.*)'
        action: keep

  # üí∞ Flashloan Services
  - job_name: 'flashloan-providers'
    static_configs:
      - targets:
          - 'aave-v3:3020'
          - 'compound:3021'
          - 'dydx:3022'
    scrape_interval: 10s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^:]+):(\d+)'
        target_label: flashloan_provider
        replacement: '${1}'
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(flashloan_.*|lending_.*|borrowing_.*)'
        action: keep

  # üõ°Ô∏è Risk Management Service
  - job_name: 'risk-manager'
    static_configs:
      - targets: ['risk-manager:3030']
    scrape_interval: 5s
    metrics_path: '/metrics'
    params:
      include_stress_tests: ['true']
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(risk_.*|drawdown_.*|exposure_.*|var_.*)'
        action: keep
      # Calculate risk ratios
      - source_labels: [current_exposure, max_exposure]
        target_label: exposure_ratio
        regex: '([0-9.]+);([0-9.]+)'
        replacement: '${1}/${2}'

  # üîÑ Strategy Performance Monitoring
  - job_name: 'strategy-monitor'
    static_configs:
      - targets: ['strategy-monitor:3040']
    scrape_interval: 10s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [strategy_name]
        target_label: arbitrage_strategy
      - source_labels: [strategy_type]
        target_label: strategy_category
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(strategy_.*|execution_.*|performance_.*)'
        action: keep

  # üìä System Metrics (Node Exporter)
  - job_name: 'node-exporter'
    static_configs:
      - targets: ['node-exporter:9100']
    scrape_interval: 15s
    relabel_configs:
      - source_labels: [__address__]
        target_label: instance
      - source_labels: [__address__]
        regex: '([^:]+):(\d+)'
        target_label: server
        replacement: '${1}'

  # üê≥ Docker Container Metrics (cAdvisor)
  - job_name: 'cadvisor'
    static_configs:
      - targets: ['cadvisor:8080']
    scrape_interval: 10s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [container_label_com_docker_compose_service]
        target_label: service_name
      - source_labels: [container_label_com_docker_compose_project]
        target_label: project_name

  # üóÑÔ∏è Database Metrics (Redis)
  - job_name: 'redis-exporter'
    static_configs:
      - targets: ['redis-exporter:9121']
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [redis_instance]
        target_label: cache_instance

  # üåê Blockchain Node Metrics
  - job_name: 'blockchain-nodes'
    static_configs:
      - targets:
          - 'ethereum-node-exporter:9545'
          - 'polygon-node-exporter:9546'
          - 'arbitrum-node-exporter:9547'
    scrape_interval: 30s
    relabel_configs:
      - source_labels: [__address__]
        regex: '([^-]+)-node-exporter:(\d+)'
        target_label: blockchain_network
        replacement: '${1}'
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(ethereum_.*|polygon_.*|arbitrum_.*|node_.*|block_.*)'
        action: keep

  # üì° WebSocket Connection Monitoring
  - job_name: 'websocket-monitor'
    static_configs:
      - targets: ['websocket-monitor:3050']
    scrape_interval: 5s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [websocket_endpoint]
        target_label: ws_endpoint
      - source_labels: [connection_type]
        target_label: ws_type
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(websocket_.*|connection_.*|latency_.*)'
        action: keep

  # üîí MEV Protection Service
  - job_name: 'mev-protection'
    static_configs:
      - targets: ['mev-protection:3060']
    scrape_interval: 10s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [mev_provider]
        target_label: protection_provider
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(mev_.*|flashbots_.*|protection_.*)'
        action: keep

  # üì± Notification Service
  - job_name: 'notification-service'
    static_configs:
      - targets: ['notification-service:3070']
    scrape_interval: 30s
    metrics_path: '/metrics'
    relabel_configs:
      - source_labels: [notification_channel]
        target_label: alert_channel
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(notification_.*|alert_.*|telegram_.*|email_.*)'
        action: keep

  # üîç Health Check Monitoring
  - job_name: 'health-checks'
    static_configs:
      - targets: ['health-monitor:3080']
    scrape_interval: 10s
    metrics_path: '/health/metrics'
    relabel_configs:
      - source_labels: [service_name]
        target_label: monitored_service
      - source_labels: [check_type]
        target_label: health_check_type

  # üìä Custom Application Metrics
  - job_name: 'custom-metrics'
    static_configs:
      - targets: ['custom-metrics:3090']
    scrape_interval: 15s
    metrics_path: '/custom/metrics'
    honor_timestamps: true
    relabel_configs:
      - source_labels: [metric_category]
        target_label: custom_category
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(arbitrage_custom_.*|trading_custom_.*)'
        action: keep

# üîÑ Remote Write Configuration (Optional - for long-term storage)
remote_write:
  - url: "http://victoriametrics:8428/api/v1/write"
    queue_config:
      max_samples_per_send: 10000
      max_shards: 200
      capacity: 100000
    metadata_config:
      send: true
      send_interval: 30s
    write_relabel_configs:
      # Keep only important long-term metrics
      - source_labels: [__name__]
        regex: '(arbitrage_profit_.*|flashloan_success_.*|risk_.*|strategy_performance_.*)'
        action: keep

# üìñ Remote Read Configuration (Optional - for historical data)
remote_read:
  - url: "http://victoriametrics:8428/api/v1/read"
    read_recent: true
    remote_timeout: 30s

# üè∑Ô∏è Service Discovery Configuration
# File-based service discovery for dynamic targets
file_sd_configs:
  - files:
      - '/etc/prometheus/targets/*.yml'
    refresh_interval: 30s

# üéõÔ∏è Advanced Configuration Options
storage:
  tsdb:
    path: /prometheus/data
    retention.time: 30d               # Keep data for 30 days
    retention.size: 50GB              # Maximum storage size
    wal-compression: true             # Enable WAL compression
    no-lockfile: false
  exemplars:
    max-exemplars: 100000            # Maximum number of exemplars

# üîß Query Configuration
query:
  timeout: 2m                        # Query timeout
  max-concurrent-queries: 20         # Maximum concurrent queries
  max-samples: 50000000             # Maximum samples per query
  
# üåê Web Configuration
web:
  listen-address: "0.0.0.0:9090"    # Listen on all interfaces
  max-connections: 512               # Maximum concurrent connections
  read-timeout: 30s                 # Read timeout
  route-prefix: /                   # Route prefix
  external-url: http://prometheus:9090  # External URL for links
  
# üìä Feature Flags
feature_flags:
  - agent                           # Enable agent mode
  - exemplar-storage               # Enable exemplar storage
  - expand-external-labels         # Expand external labels
  - memory-snapshot-on-shutdown    # Create memory snapshot on shutdown
  - promql-at-modifier            # Enable @ modifier in PromQL
  - promql-negative-offset        # Enable negative offset in PromQL
  - remote-write-receiver         # Enable remote write receiver
  - otlp-write-receiver          # Enable OTLP write receiver

# üìù Tracing Configuration (OpenTelemetry)
tracing:
  endpoint: "jaeger:14268/api/traces"
  headers:
    X-Trace-Source: "arbitrage-bot-prometheus"
  timeout: 5s
  compression: gzip
  insecure: true

# üîê Security Configuration
basic_auth_users:
  admin: $2b$12$hNf2lSsxfm0.i4a.1kVpSOVyBCfIB51VRjgBUyv6kdnyTlgWj81Ay  # admin:secret

# üìä Recording Rules for Pre-calculated Metrics
rule_files:
  - "rules/recording_rules.yml"

# üíæ Custom Logging Configuration
log:
  level: info                       # Log level: debug, info, warn, error
  format: json                      # Log format: logfmt, json
  queries.log-file: /var/log/prometheus/queries.log  # Query log file

# üéØ Target Discovery Labels
target_groups:
  - targets: ['arbitrage-bot:3000']
    labels:
      service: 'arbitrage-bot'
      tier: 'application'
      environment: 'production'
      team: 'trading'
      
  - targets: ['price-monitor:3001'] 
    labels:
      service: 'price-monitor'
      tier: 'data'
      environment: 'production'
      team: 'data-engineering'
      
  - targets: ['risk-manager:3030']
    labels:
      service: 'risk-manager'
      tier: 'risk'
      environment: 'production'
      team: 'risk-management'

# üìà Performance Optimization
optimization:
  enable_feature_remote_write_receiver: true
  enable_feature_exemplar_storage: true
  enable_feature_memory_snapshot_on_shutdown: true
  
# üéõÔ∏è Advanced Relabeling Examples
relabel_configs_examples:
  # Example: Add environment label to all metrics
  - target_label: environment
    replacement: production
    
  # Example: Normalize service names
  - source_labels: [__meta_docker_container_label_com_docker_compose_service]
    target_label: service
    regex: '(.+)'
    replacement: '${1}'
    
  # Example: Add region information
  - target_label: region
    replacement: us-east-1
    
  # Example: Custom metric labeling
  - source_labels: [__name__]
    regex: 'arbitrage_(.*)'
    target_label: metric_type
    replacement: 'arbitrage'

# üîç Debugging Configuration
debug:
  enable_query_stats: true
  enable_query_log: true
  enable_feature_promql_at_modifier: true
  
# üìä Metric-specific Configuration
metric_configs:
  arbitrage_metrics:
    scrape_interval: 1s
    honor_labels: true
    honor_timestamps: true
    
  risk_metrics:
    scrape_interval: 5s
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: 'risk_(.*)'
        action: keep
        
  system_metrics:
    scrape_interval: 15s
    metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(cpu_.*|memory_.*|disk_.*|network_.*)'
        action: keep